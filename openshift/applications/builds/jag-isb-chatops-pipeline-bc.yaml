apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: jag-isb-chatops-template
metadata:
  annotations:
    openshift.io/display-name: Chatops Pipeline Template
    description: |-
      This is a template for an OpenShift Jenkins Pipelines.
    iconClass: icon-jenkins
    tags: instant-app,jenkins
  name: pipeline-template
parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: appName
    required: true
    value: jag-isb-splunk-chatops
  - description: Openshift namespace prefix
    displayName: Namespace Prefix
    name: namespacePrefix
    required: true
    value: s9h76g
  - description: URL to Github Repository
    displayName: Github URL
    name: githubURL
    required: true
    value: https://github.com/bcgov/jag-isb-splunk-chatops
  - description: Target Branch on Github
    displayName: Github target Branch
    name: githubBranch
    required: true
    value: main
  - description: Jenkins Pod Type
    displayName: Jenkins Pod Type
    name: jenkinsPod
    required: true
    value: maven
  - description: Pipeline Lifecycle Webhook
    displayName: Webhook for devops lifecycle output updates
    name: lifeCycleWebhook
objects:
  - apiVersion: build.openshift.io/v1
    kind: BuildConfig
    metadata:
      name: chatops-pipeline
      namespace: s9h76g-tools
      labels:
        application: jag-isb-splunk-chatops
        template: chatops-pipeline-template
    spec:
      nodeSelector: {}
      output: {}
      resources: {}
      successfulBuildsHistoryLimit: 5
      failedBuildsHistoryLimit: 5
      strategy:
        type: JenkinsPipeline
        jenkinsPipelineStrategy:
          env:
            - name: APP_NAME
              value: ${appName}
            - name: NAMESPACE_PREFIX
              value: ${namespacePrefix}
            - name: GITHUB_URL
              value: ${githubURL}
            - name: GITHUB_BRANCH
              value: ${githubBranch}
            - name: JENKINS_POD
              value: ${jenkinsPod}
            - name: LIFECYCLE_WEBHOOK
              value: lifeCycleWebhook
          jenkinsfile: |
            try {
                node("${JENKINS_POD}") {

                    // Build Image
                    stage("Build ${appName}") {
                        openshift.withCluster() {
                            openshift.withProject() {
                                sh 'oc start-build ${APP_NAME} -n ${NAMESPACE_PREFIX}-tools --wait' 
                            }
                        }
                    }

                    // Tag Image for Dev
                    stage('Promote to DEV') {
                        openshift.withCluster() {
                            openshift.withProject(){
                                sh "echo Tagging image for DEV"
                                sh 'oc tag ${APP_NAME}:latest ${APP_NAME}:dev'
                            }
                        }
                    }

                    stage("Deploy to DEV") {
                        openshift.withCluster() {
                            openshift.withProject() {
                                sh 'echo Wait for notification app to rollout completely.'
                                sh 'oc rollout status -n ${NAMESPACE_PREFIX}-dev dc/${APP_NAME}-dc --watch'
                            }
                        }
                    }
                    
                    // Tag Image for Test
                    stage('Promote to TEST') {
                        script {
                            input message: 'Promote application to Test?'
                        }
                        openshift.withCluster() {
                            openshift.withProject() {
                                sh "echo Tagging image for TEST"
                                sh 'oc tag ${APP_NAME}:latest ${APP_NAME}:test'
                            }
                        }
                    }
                    
                    stage("Deploy to TEST") {
                        openshift.withCluster() {
                            openshift.withProject() {
                                sh 'echo Wait for Demo app to rollout completely.'
                                sh 'oc rollout status -n ${NAMESPACE_PREFIX}-test dc/${APP_NAME}-dc --watch'
                            }
                        }
                    }
                    
                    // Tag Image for Prod
                    stage('Promote to PROD') {
                        script {
                            input message: 'Promote application to Prod?'
                        }
                        openshift.withCluster() {
                            openshift.withProject() {
                                sh "echo Tagging image for PROD"
                                sh 'oc tag ${APP_NAME}:latest ${APP_NAME}:prod'
                            }
                        }
                    }
                    
                    stage("Deploy to PROD") {
                        openshift.withCluster() {
                            openshift.withProject() {
                                sh 'echo Wait for Demo app to rollout completely.'
                                sh 'oc rollout status -n ${NAMESPACE_PREFIX}-prod dc/${APP_NAME}-dc --watch'
                            }
                        }
                    }

                }

            } catch (err) {
                echo "in catch block"
                currentBuild.result = 'FAILURE'
                env.ERR = "${err}"
                node {
                    sh "curl -XPOST '${LIFECYCLE_WEBHOOK}' -H 'Content-type: application/json' --data '{\"username\":\"The Pipe Lion\",\"icon_emoji\":\":lion_face:\",\"text\": \"${APP_NAME} Pipeline Failure - ${ERR}\"}'"
                }
                echo "Caught: ${err}"
                throw err
            }
      postCommit: {}
      source:
        type: Git
        git:
          uri: ${githubURL}
          ref: ${githubBranch}
      triggers:
        - type: ConfigChange
        - type: GitHub
          github:
            secretReference:
              name: github-secret
      runPolicy: Serial
    status:
      lastVersion: 0
